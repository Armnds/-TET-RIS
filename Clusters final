
import numpy as np
from sklearn.cluster import KMeans
import os
from PIL import Image
from skimage.metrics import structural_similarity as compare_ssim

# Existing materials folder
material_folder = r"C:\Users\arian\Downloads\CORE Group\-TET-RIS\Material"

def image_folder(folder):
    images = []
    thickness_values = []
    filenames = []
    material_types = []

    for material_folder in os.listdir(folder):
        material_folder_path = os.path.join(folder, material_folder)

        for filename in os.listdir(material_folder_path):
            if filename.endswith(".png"):  # Only process image files
                filepath = os.path.join(material_folder_path, filename)
                img = Image.open(filepath)
                img = np.array(img)

                # Split the filename to get material and thickness
                name_part, thickness_str = filename.split("_")
                thickness = int(thickness_str.replace("mm.png", ""))

                images.append(img)
                thickness_values.append(thickness)
                filenames.append(filename)
                material_types.append(material_folder)  # Store the material type (e.g., 'brick')

    return images, thickness_values, material_types, filenames

def load_images_from_folders(folder):
    return image_folder(folder)

def compare_image(image1, image2):
    img1_gray = np.mean(image1, axis=2)
    img2_gray = np.mean(image2, axis=2)
    score, _ = compare_ssim(img1_gray, img2_gray, full=True)
    return score
# This uses the SSIM (Structural Similarity Index) to compare the two grayscale images and returns a similarity score. 
# The score is a number between -1 and 1, where 1 means the images are identical.


def find_similar_cluster(new_img, grouped_images, similarity_threshold=0.75):
    best_match = None
    best_score = -1
    
    for material_thickness, img_list in grouped_images.items():
        for _, existing_img in img_list:
            similarity = compare_image(new_img, existing_img)
            if similarity > best_score:
                best_score = similarity
                best_match = material_thickness

            if similarity > similarity_threshold:
                return material_thickness, similarity

    return best_match, best_score

def ask_user_to_add_material(new_img, new_material_type, new_thickness, root_folder):
    user_response = input(f"The material '{new_material_type}' was not found in existing clusters. Do you want to add it to the material library? (yes/no): ").strip().lower()
    if user_response == "yes":
        # Create new material folder
        new_material_folder = os.path.join(root_folder, new_material_type)
        if not os.path.exists(new_material_folder):
            os.makedirs(new_material_folder)

        # Define new filename and save the image
        new_filename = f"{new_material_type}_{new_thickness}mm.png"
        new_filepath = os.path.join(new_material_folder, new_filename)
        new_img_pil = Image.fromarray(new_img)
        new_img_pil.save(new_filepath)
        print(f"New material '{new_material_type}' with thickness {new_thickness}mm added to the library.")
    else:
        print("Material not added to the library.")

def group_images_by_material_and_thickness(images, material_types, thickness_values, filenames):
    grouped_images = {}

    for img, material, thickness, filename in zip(images, material_types, thickness_values, filenames):
        thickness_cluster = None
        if 10 <= thickness <= 14:
            thickness_cluster = "10-14mm"
        elif 16 <= thickness <= 20:
            thickness_cluster = "16-20mm"
        else:
            thickness_cluster = "other"

        material_thickness_key = f"{material}_{thickness_cluster}"

        if material_thickness_key not in grouped_images:
            grouped_images[material_thickness_key] = []

        grouped_images[material_thickness_key].append((filename, img))

    return grouped_images

def add_image_to_cluster(new_img, new_material_type, new_thickness, grouped_images, root_folder, similarity_threshold=0.75):
    # Check if the image is similar to any existing cluster
    matched_cluster, similarity_score = find_similar_cluster(new_img, grouped_images, similarity_threshold)

    if matched_cluster:
        print(f"Existing material detected '{matched_cluster}' (similarity: {similarity_score:.2f}).")
        user_input = input(f"Do you want to add this material to the '{matched_cluster}' cluster? (yes/no): ").strip().lower()
        if user_input == "yes":
            grouped_images[matched_cluster].append((f"new_{new_material_type}_{new_thickness}mm.png", new_img))
            print(f"Image added to the '{matched_cluster}' cluster.")
        else:
            print("Image not added to the cluster.")
    else:
        print("No matching cluster found.")
        ask_user_to_add_material(new_img, new_material_type, new_thickness, root_folder)

# Define the root folder containing existing material folders (e.g., 'materials/brick/')
root_folder = r"C:\Users\arian\Downloads\CORE Group\-TET-RIS\New materials"

# Load the existing material images
images, thickness_values, material_types, filenames = load_images_from_folders(material_folder)

# Group existing images based on material type and thickness ranges
grouped_images = group_images_by_material_and_thickness(images, material_types, thickness_values, filenames)

# Load a new image to compare (replace this with your actual new image)
new_image_path = r"C:\Users\arian\Downloads\CORE Group\-TET-RIS\New materials\path_to_new_image.png"  # Update this to your new image path
new_img = Image.open(new_image_path)
new_img = np.array(new_img)

# Define the material type and thickness of the new image
new_material_type = "brick"  # For example, "brick"
new_thickness = 12  # For example, 12mm

# Add the new image to the clusters or create a new one
add_image_to_cluster(new_img, new_material_type, new_thickness, grouped_images, material_folder)






# Define the corners based on input frame dimensions
def define_corners(image):
    height, width = image.shape
    return (0, 0), (width, 0), (0, height), (width, height)

# Create a grid
def create_grid(image, grid_size_x, grid_size_y):
    height, width = image.shape
    grid = np.zeros((grid_size_y, grid_size_x), dtype=int)
    return grid, height // grid_size_y, width // grid_size_x

# Function to place elements from one corner
def place_from_corner(grid, element, start_corner=(0, 0)):
    x, y = start_corner
    for i in range(element.shape[0]):
        for j in range(element.shape[1]):
            if x + i < grid.shape[0] and y + j < grid.shape[1]:
                grid[x + i, y + j] = element[i, j]
    return grid

# Assign numeric values to the grid
def assign_numeric_values(grid):
    numeric_grid = np.where(grid > 0, 1, 0)
    return numeric_grid

# Load the existing material images
images, thickness_values, material_types, filenames = load_images_from_folders(material_folder)

# Group existing images based on material type and thickness ranges
grouped_images = group_images_by_material_and_thickness(images, material_types, thickness_values, filenames)

# Load a new image to compare (replace this with your actual new image)
new_image_path = r"C:\Users\arian\Downloads\CORE Group\-TET-RIS\New materials\path_to_new_image.png"  # Update this to your new image path
new_img = Image.open(new_image_path)
new_img = np.array(new_img)

# Define the material type and thickness of the new image
new_material_type = "brick"  # For example, "brick"
new_thickness = 12  # For example, 12mm

# Example grid creation based on the new image
grid_size_x, grid_size_y = 10, 10  # Example grid size
grid, cell_height, cell_width = create_grid(new_img, grid_size_x, grid_size_y)

# Example element to place
element = np.ones((2, 2))  # Small element example

# Example placements
grid = place_from_corner(grid, element, start_corner=(0, 0))

# Assign numeric values to the grid (0=empty, 1=occupied)
numeric_grid = assign_numeric_values(grid)

# Display the final grid
def visualize_grid(grid, title="Grid"):
    grid_image = cv2.resize(grid * 255, (grid.shape[1] * 10, grid.shape[0] * 10), interpolation=cv2.INTER_NEAREST)
    cv2.imshow(title, grid_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

visualize_grid(numeric_grid, title="Final Grid")