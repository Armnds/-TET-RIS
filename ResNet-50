import os
import requests
from PIL import Image
from io import BytesIO

# Replace with your actual keys
FLICKR_PUBLIC = '9ea8e2d5e1467623cb4fbc3c72393a84'
FLICKR_SECRET = '63d5821a232e80d4'
PEXELS_API_KEY = 'LJMErn3vi9NnwSeZbVLRFU0pmxl66eH3DSYzNk8ldX95WZ3seJwftW8S'

# Correct folder path for Windows (use raw string or double backslashes)
folder_path = r'C:\Users\arian\Downloads\image_folder'
os.makedirs(folder_path, exist_ok=True)

# Function to download and save an image
def download_and_save_image(image_url, image_name):
    try:
        response = requests.get(image_url)
        image = Image.open(BytesIO(response.content))
        image_path = os.path.join(folder_path, f"{image_name}.jpg")
        image.save(image_path)
        print(f"Saved: {image_name}")
    except Exception as e:
        print(f"Failed to save {image_name}: {e}")

# Fetch images from Flickr
def fetch_flickr_images(tags, per_page=10):
    flickr_search_params = {
        'api_key': FLICKR_PUBLIC,
        'method': 'flickr.photos.search',
        'format': 'json',
        'nojsoncallback': 1,
        'tags': tags,
        'per_page': per_page
    }
    response = requests.get('https://api.flickr.com/services/rest/', params=flickr_search_params)
    data = response.json()

    if 'photos' in data:
        for photo in data['photos']['photo']:
            photo_url = f"https://live.staticflickr.com/{photo['server']}/{photo['id']}_{photo['secret']}.jpg"
            image_name = f"flickr_{photo['id']}"
            download_and_save_image(photo_url, image_name)

# Fetch images from Pexels
def fetch_pexels_images(query, per_page=10):
    pexels_search_url = "https://api.pexels.com/v1/search"
    headers = {'Authorization': PEXELS_API_KEY}
    params = {'query': query, 'per_page': per_page}

    response = requests.get(pexels_search_url, headers=headers, params=params)
    
    # Check if the request was successful
    if response.status_code != 200:
        print(f"Error fetching Pexels images: {response.status_code} - {response.text}")
        return
    
    try:
        data = response.json()
    except ValueError:
        print("Failed to parse JSON response from Pexels.")
        print(response.text)
        return

    if 'photos' in data:
        for photo in data['photos']:
            photo_url = photo['src']['large']
            image_name = f"pexels_{photo['id']}"
            download_and_save_image(photo_url, image_name)

# Run the functions for both APIs
if __name__ == '__main__':
    # Flickr image fetch
    fetch_flickr_images(tags='brick', per_page=5)

    # Pexels image fetch
    fetch_pexels_images(query='brick', per_page=5)


print("Images downloaded successfully!")
